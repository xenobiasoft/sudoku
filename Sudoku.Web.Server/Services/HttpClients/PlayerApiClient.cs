using Sudoku.Web.Server.Models;
using System.Text.Json;

namespace Sudoku.Web.Server.Services.HttpClients;

/// <summary>
/// Provides methods for interacting with the Player API, including creating players and checking their existence.
/// </summary>
/// <remarks>This client is designed to communicate with a backend Player API using HTTP. It provides high-level
/// methods for common operations such as creating a player and verifying if a player exists. The client handles
/// serialization and deserialization of requests and responses, as well as logging and error handling.</remarks>
/// <param name="httpClient"></param>
/// <param name="logger"></param>
public class PlayerApiClient(HttpClient httpClient, ILogger<PlayerApiClient> logger) : IPlayerApiClient
{
    private readonly HttpClient _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
    private readonly ILogger<PlayerApiClient> _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    /// <summary>
    /// Creates a new player with the specified alias or an auto-generated alias if none is provided.
    /// </summary>
    /// <remarks>This method sends a request to the server to create a new player. If the operation is
    /// successful, the server returns the alias of the created player. If the operation fails, the method logs the
    /// error and returns a failure result with the error details.</remarks>
    /// <param name="alias">The desired alias for the player. If <see langword="null"/>, an alias will be auto-generated by the server.</param>
    /// <returns>An <see cref="ApiResult{T}"/> containing the alias of the created player if the operation is successful, or an
    /// error message if the operation fails.</returns>
    public async Task<ApiResult<string>> CreatePlayerAsync(string? alias = null)
    {
        try
        {
            _logger.LogInformation("Creating player with alias: {Alias}", alias ?? "auto-generated");
            
            var request = alias != null ? new CreatePlayerRequest(alias) : null;
            var response = await _httpClient.PostAsJsonAsync("api/players", request, _jsonOptions);

            if (response.IsSuccessStatusCode)
            {
                var createdAlias = await response.Content.ReadAsStringAsync();
                // Remove quotes if the response is a JSON string
                createdAlias = JsonSerializer.Deserialize<string>(createdAlias) ?? createdAlias.Trim('"');
                
                _logger.LogInformation("Player created successfully with alias: {Alias}", createdAlias);
                return ApiResult<string>.Success(createdAlias);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _logger.LogWarning("Failed to create player. Status: {StatusCode}, Error: {Error}", response.StatusCode, error);
                return ApiResult<string>.Failure($"Failed to create player: {error}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception occurred while creating player");
            return ApiResult<string>.Failure($"Exception occurred: {ex.Message}");
        }
    }

    /// <summary>
    /// Asynchronously checks whether a player with the specified alias exists.
    /// </summary>
    /// <remarks>This method sends an HTTP GET request to the API to determine if the player exists.  If the
    /// API call fails or an exception occurs, the result will indicate failure with an appropriate error
    /// message.</remarks>
    /// <param name="alias">The alias of the player to check. Cannot be null or empty.</param>
    /// <returns>An <see cref="ApiResult{T}"/> containing a boolean value indicating whether the player exists. If the operation
    /// is successful, the result will be <see langword="true"/> if the player exists; otherwise, <see
    /// langword="false"/>. If the operation fails, the result will contain an error message.</returns>
    public async Task<ApiResult<bool>> PlayerExistsAsync(string alias)
    {
        try
        {
            _logger.LogInformation("Checking if player exists: {Alias}", alias);
            
            var response = await _httpClient.GetAsync($"api/players/{Uri.EscapeDataString(alias)}/exists");

            if (response.IsSuccessStatusCode)
            {
                var exists = await response.Content.ReadFromJsonAsync<bool>(_jsonOptions);
                _logger.LogInformation("Player existence check completed. Alias: {Alias}, Exists: {Exists}", alias, exists);
                return ApiResult<bool>.Success(exists);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _logger.LogWarning("Failed to check player existence. Status: {StatusCode}, Error: {Error}", response.StatusCode, error);
                return ApiResult<bool>.Failure($"Failed to check player existence: {error}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception occurred while checking player existence");
            return ApiResult<bool>.Failure($"Exception occurred: {ex.Message}");
        }
    }
}